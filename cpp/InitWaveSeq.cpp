/**
 * This file was generated by bin2cpp v2.3.0
 * Copyright (C) 2013-2020 end2endzone.com. All rights reserved.
 * bin2cpp is open source software, see http://github.com/end2endzone/bin2cpp
 * Source code for file 'InitWaveSeq.bin', last modified 1611531155.
 * Do not modify this file.
 */
#if defined(_WIN32) && !defined(_CRT_SECURE_NO_WARNINGS)
#define _CRT_SECURE_NO_WARNINGS
#endif
#include "InitWaveSeq.h"
#include <stdio.h> //for FILE
#include <string> //for memcpy
namespace bin2cpp
{
  class InitWaveSeqFile : public virtual bin2cpp::File
  {
  public:
    InitWaveSeqFile() { build(); }
    virtual ~InitWaveSeqFile() {}
    virtual size_t getSize() const { return 1207; }
    virtual const char * getFilename() const { return "InitWaveSeq.bin"; }
    virtual const char * getBuffer() const { return mBuffer.c_str(); }
    void build()
    {
      mBuffer.clear();
      mBuffer.reserve(getSize()); //allocate all required memory at once to prevent reallocations
      mBuffer.append("\n\022Init Wave Sequence\022\002\022\0\032\212\t2\002\022\0:_\n\020Init Master Lane\022\002\b\004\"\002\022\0*\004\b\002\022\0002\"\022\002\022\0\032\004\b~\022\0\"\002\022\0*\002\022\0002\002\022\0:\002\022\0B\002\022\0J\002\022\0:\a\r\0\0\0@\022\0B\020\312>\310\336\3342\021\351\230\364\0#\337\337\v\207\252\001\350\001\n%\022\002\022\0\032\004\b\002\022\0\"\002\022\0*\002\022\0002\005\b\312\001\022\0:\002\022\0B\002\022\0J\002\022\0\022;\022\004\b\n\022\0\032\004\b\002\022\0002\002\022\0:\002\022\0B\a\r\0\0\310B", 200);
      mBuffer.append("\022\0R\004\b\016\022\0Z\004\b\002\022\0b\a\r\0\0\200\?\022\0j\a\r\315\314L\?\022\0\022;\022\004\b\n\022\0\032\004\b\002\022\0002\002\022\0:\002\022\0B\a\r\0\0\310B\022\0R\004\b\016\022\0Z\004\b\002\022\0b\a\r=Q\177>\022\0j\a\r>\303.<\022\0\032\002\022\0\"\002\022\0*\004\b\002\022\0002\004\b\002\022\0:\020Init Timing LaneB\020\240BN\002\343\255\021\351\233k\0#\337\337\v\207J\a\r\0\0\200\?\022\0R\004\b\n\022\0\262\001\304\001\n\'\022\002\022\0\032\004\b\002\022\0\"\002\022\0*\004\b\002\022\0002\005\b\312\001\022\0:\002\022", 200);
      mBuffer.append("\0B\002\022\0J\002\022\0\022\020Init Sample Lane\032\020\236\016\350\020\3343\021\351\223B\0#\337\337\v\207\272\003t\n5\n\022\n\020Korg\0\0\0\0\0\002\0\020\311\002\0\0\032\002\022\0\"\002\022\0*\002\022\0002\002\022\0:\a\r\0\0\310B\022\0B\002\022\0J\002\022\0\n5\n\022\n\020Korg\0\0\0\0\0\002\0\020\223\002\0\0\032\002\022\0\"\002\022\0*\002\022\0002\002\022\0:\a\r\0\0\310B\022\0B\002\022\0J\002\022\0\022\004\b\001\022\0\262\001\177\n%\022\002\022\0\032\004\b\002\022\0\"\002\022\0*\002\022\0002\005\b\312\001\022\0:\002\022\0B\002", 200);
      mBuffer.append("\022\0J\002\022\0\022\017Init Pitch Lane\032\020\026SG8\316\243\021\351\224L\0#\337\337\v\207\302\0032\n\025\n\002\022\0\022\002\022\0\032\a\r\0\0\310B\022\0\"\002\022\0\n\025\n\002\022\0\022\002\022\0\032\a\r\0\0\310B\022\0\"\002\022\0\022\002\022\0\262\001\231\001\n%\022\002\022\0\032\004\b\002\022\0\"\002\022\0*\002\022\0002\005\b\312\001\022\0:\002\022\0B\002\022\0J\002\022\0\022\017Init Shape Lane\032\020\267<\210\240\350\0\021\351\204\005\0#\337\337\v\207\352\003L\n$\n\002\022\0\022\002\022\0\032\a\r\0\0\200\?\022\0\"\002\022\0*\a", 200);
      mBuffer.append("\r\0\0\310B\022\0002\004\b\001\022\0\n$\n\002\022\0\022\002\022\0\032\a\r\0\0\200\?\022\0\"\002\022\0*\a\r\0\0\310B\022\0002\004\b\001\022\0\262\001t\n%\022\002\022\0\032\004\b\002\022\0\"\002\022\0*\002\022\0002\005\b\312\001\022\0:\002\022\0B\002\022\0J\002\022\0\022\016Init Gate Lane\032\020.\250l\036\316\243\021\351\261!\0#\337\337\v\207\342\003(\n\022\n\a\r\0\0\310B\022\0\022\a\r\0\0\310B\022\0\n\022\n\a\r\0\0\310B\022\0\022\a\r\0\0\310B\022\0\262\001\204\001\n%\022\002\022\0\032\004\b\002\022\0\"\002\022\0*\002\022\0002\005\b\312\001\022", 200);
      mBuffer.append("\0:\002\022\0B\002\022\0J\002\022\0\022\022Init Step Seq Lane\032\020\323,g \364\367\021\351\256\024\0#\337\337\v\207\312\0034\n\026\022\a\r\0\0\310B\022\0*\a\r\0\0\310B\022\0002\002\022\0\n\026\022\a\r\0\0\310B\022\0*\a\r\0\0\310B\022\0002\002\022\0\022\002\022\0\262\001P\n#\022\002\022\0\032\002\022\0\"\002\022\0*\002\022\0002\005\b\312\001\022\0:\002\022\0B\002\022\0J\002\022\0\022\023Default Volume Lane\332\003\023\n\r\n\002\022\0\022\a\r\0\0\310B\022\0\022\002\022\0\"\020\323F;\226\364\367\021\351\273", 200);
      mBuffer.append("\036\0#\337\337\v\207", 7);
    }
    virtual bool save(const char * iFilename) const
    {
      FILE * f = fopen(iFilename, "wb");
      if (!f) return false;
      size_t fileSize = getSize();
      const char * buffer = getBuffer();
      fwrite(buffer, 1, fileSize, f);
      fclose(f);
      return true;
    }
  private:
    std::string mBuffer;
  };
  const File & getInitWaveSeqFile() { static InitWaveSeqFile _instance; return _instance; }
}; //bin2cpp
